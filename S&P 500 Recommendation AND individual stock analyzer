#This program (1) puts the data into an excel spreadsheet of your choosing and (2) passes the filtered stocks into the 'Analysis()' method. 
#Writing the analysis into a text file is a work in progress

#***************************************
#***************************************
#PART 6: S&P 500 FILTER
#***************************************
#***************************************
#ALL NECESSARY LIBRARIES FOR THE ENTIRE PROJECT
library('BatchGetSymbols')
library('rvest')
library('dplyr')
library('xml2')
library('quantmod')
library('stringr')
library('tidyquant')
library('ggplot2')
library('xlsx')
#Functions for Filtered Stock Tickers
#Get the information about the stock
get_stock_data <- function(symbol)
  {
  days_back <- 1000
today <- Sys.Date()
  Past_Day <- Sys.Date() - days_back
  frequency <- "daily"
  #Get Information on Stock Ticker
  stock_data <- BatchGetSymbols(symbol,
                              first.date = Past_Day,
                              freq.data = frequency,
                              last.date = today,
                              cache.folder = file.path(tempdir(),
                                                  'BGS_Cache') )
    return(stock_data)
  }
#Calculate the percent change from A to B
percent_change <- function(a,b){
  change <- (a-b)/b*100
  return(change)
}
#Calculate the difference of the percent changes of two ranges
percent_difference <- function(a,b){
 c <- a-b
  return(c)
}
#Function to Calculate the Moving Averages
Moving_Average <- function(days_total, moving_average_days, closing_prices){
  MA <- 1:(days_total)
vec_MA <- 1:(days_total)
for(val in vec_MA) {
  if(val+moving_average_days>days_total){
    break
  }
  if(moving_average_days!=0){
  MA[val+moving_average_days] <- mean(closing_prices[val:(val+moving_average_days)])
  }else{
    MA[val] <- mean(closing_prices[1:(val)])
  }
}
  if(moving_average_days!=0){
#Fill in first 'moving_average_days' days with NA
bs_1 <- 1:moving_average_days
for(a in bs_1){
  MA[a] <- NA
}
  }
  return(MA)
}
#Print the graphs
graphs <- function(a,b){
print(a)
print(b)
}

#Print out all the info you want about the filtered stocks
Analysis <- function(symbol, tytny, Buy, Hold, Sell, total_shares, EPS_Current,Next_Year_EPS,lytty, value_counter, liquid_counter, MA_20, MA_50, MA_200, MA_length, percent_MA_20, percent_MA_50, percent_MA_200, SP_v_Stock_5, SP_v_Stock_25, SP_v_Stock_100, SP_v_Stock_200, SP_v_Stock_500, DOW_v_Stock_5,DOW_v_Stock_25,DOW_v_Stock_100,DOW_v_Stock_200,DOW_v_Stock_500)
    {
  #***************************************
#***************************************
#PART 1: MOVING AVERAGES AND PRICE CHART
#***************************************
#***************************************
#Initialize Date Variables
stock_data <- get_stock_data(symbol)
  #Calculate the Moving Average from first day you analyzed
MA <- Moving_Average(MA_length, 0,stock_data$df.tickers$price.close)
  #Create a data frame for the graph objects
a <- stock_data$df.tickers$ref.date
b <- stock_data$df.tickers$price.close
graph_data <- data.frame(a, b, MA, MA_20, MA_50, MA_200)
  #Graph the variables and Moving Average
  graph_1 <- ggplot(graph_data, aes(x=a)) +
  geom_line(aes(y = b), color = "red") +
  geom_line(aes(y = MA), color = "blue") +
  geom_line(aes(y = MA_20), color = "green") +
  geom_line(aes(y = MA_50), color = "yellow") +
  geom_line(aes(y = MA_200), color = "orange") +
  labs(y= "Price (USD)", x = "Date (Month)") +
    ggtitle(paste(symbol, "Price over Time"))
  #***************************************
#***************************************
#PART 2: Dividend and Earnings Analysis
#***************************************
#***************************************
  symbol_1 <- tolower(symbol)
#Get Dividend Data
div <- getDividends(symbol, from = (Sys.Date()-3650), to = Sys.Date())
#Get the dates ready for processing
Q <- length(div)
vec <- 1:Q
#Graph the dividend data
if(length(div)>0){
  df_1 <- data.frame(div,vec)
dividend_graph <- ggplot(df_1, aes(x=vec, y=div)) +
  geom_point() +
  labs(x='Quarter #', y='Dividend Amount') +
  ggtitle(paste("Dividend Historical Trend For", symbol))
}
#Specifying the url for desired website to be scraped
url_2 <- paste0('https://www.marketwatch.com/investing/stock/', symbol_1,'/analystestimates')
#Reading the HTML code from the website
webpage_2 <- read_html(url_2)
#Using CSS selectors to scrape the stock information
#This is the future predictions
stock_data_2 <- html_nodes(webpage_2,'td')%>%
  html_text()
#Calculate Dividend as a Fraction of Quarterly Earnings
  if(length(div)>0){
Div_Fraction <- div[Q]/as.numeric(stock_data_2[14])*100
  }
  #Calculate the expected price next year
  Next_Year_Price <- stock_data$df.tickers$price.close[MA_length]*Next_Year_EPS/EPS_Current
#***************************************
#***************************************
#PART #3: Insider Trading
#***************************************
#***************************************
#Specifying the url for desired website to be scraped
url_3 <- paste0('https://www.marketwatch.com/investing/stock/', symbol_1, '/insideractions')
#Reading the HTML code from the website
webpage_3 <- read_html(url_3)
#Using CSS selectors to scrape the stock information
#This is the insider information
stock_data_3a <- html_nodes(webpage_3, '.date') %>%
  html_text()
stock_data_3b <- html_nodes(webpage_3,'.transactionDesc')%>%
  html_text()
stock_data_3c <- html_nodes(webpage_3,'.shares')%>%
  html_text()
#Organize the insider data
master_length <- length(stock_data_3b)
stock_data_3a <- stock_data_3a[2:(master_length+1)]
stock_data_3c <- as.numeric(gsub(",", "", stock_data_3c[2:(master_length+1)]))
#Find where the trader(s) is/are disposing of stocks that cost actual money
  stock_data_3c <- stock_data_3c[bool_vec_2]
sub_length <- length(stock_data_3c)
#Print Current Price
  print(paste0(symbol, " is currently priced at $", today_stock, " per share."))
  #Calculate Current Price related to Moving Averages
  cat("\n")
  print("**********PRICE ANALYSIS**********")
  percent_MA <- (stock_data$df.tickers$price.close[MA_length]/MA[MA_length]-1)*100
  print(paste("Current Price +/- Total Moving Average: ", percent_MA, "%"))
  print(paste("Current Price +/- 20 Day Moving Average: ", percent_MA_20, "%"))
  print(paste("Current Price +/- 50 Day Moving Average: ", percent_MA_50, "%"))
  print(paste("Current Price +/- 200 Day Moving Average: ", percent_MA_200, "%"))
  cat("\n")
#Print Results of Dividend Analysis
  if(length(div)>0){
  print("**********DIVIDEND ANALYSIS**********")
print(paste0(symbol, "'s most recent dividend was: $", div[Q]," per share."))
print(paste0("Last quarter's payout was ", Div_Fraction, "% of the quarter's earnings."))
print(paste0("Last quarter's earnings totalled $", stock_data_2[14], " per share."))
  cat("\n")
  }
#Print Results of Earnings Analysis
  print("**********EARNINGS ANALYSIS**********")
print(paste0(symbol, " is predicted to have an EPS of $", EPS_Current, " this year."))
print(paste0("This is a year over year earnings growth of ", lytty, "%."))
print(paste0("Between this year and next year, earnings are expected to grow by ", tytny, "%"))
  print(paste0("If ", symbol, " maintains the same P/E Ratio, it would cost $", Next_Year_Price," next year." ))
#Print Results of Ratings Analysis
  cat("\n")
  print("**********RATINGS ANALYSIS**********")
print(paste0("Based on the average of ", trimws(gsub("\r\n","", (stock_data_2[6]))), " predictions, the price of ", symbol, " will be $", stock_data_2[4], " in a year."))
print(paste0("The stock currently has ", Buy, " BUY ratings, ", Hold, " HOLD ratings, and ", Sell, " SELL ratings."))
#Share Results of Insider Analysis
  cat("\n")
  print("**********INSIDER ANALYSIS**********")
print(paste0("Since ", stock_data_3a[master_length], ", ", sub_length, " non-0 dollar insider transactions have taken place with a net change of ", total_shares, " shares owned by ", symbol, " executives."))
  #Share Results of the Market Analysis
  cat("\n")
  print("**********FULL MARKET ANALYSIS**********")
  if(SP_v_Stock_5 > 0){
  print(paste0("In the past 5 trading days, ", symbol, " has outperformed the S&P 500 by ", SP_v_Stock_5, "%."))
  }else{
    print(paste0("In the past 5 trading days, ", symbol, " has underperformed the S&P 500 by ", SP_v_Stock_5, "%."))
  }
  if(SP_v_Stock_25 > 0){
  print(paste0("In the past 25 trading days, ", symbol, " has outperformed the S&P 500 by ", SP_v_Stock_25, "%."))
  }else{
    print(paste0("In the past 25 trading days, ", symbol, " has underperformed the S&P 500 by ", SP_v_Stock_25, "%."))
  }
  if(SP_v_Stock_100 > 0){
  print(paste0("In the past 100 trading days, ", symbol, " has outperformed the S&P 500 by ", SP_v_Stock_100, "%."))
  }else{
    print(paste0("In the past 100 trading days, ", symbol, " has underperformed the S&P 500 by ", SP_v_Stock_100, "%."))
  }
  if(SP_v_Stock_200 > 0){
  print(paste0("In the past 200 trading days, ", symbol, " has outperformed the S&P 500 by ", SP_v_Stock_200, "%."))
  }else{
    print(paste0("In the past 200 trading days, ", symbol, " has underperformed the S&P 500 by ", SP_v_Stock_200, "%."))
  }
  if(SP_v_Stock_500 > 0){
  print(paste0("In the past 500 trading days, ", symbol, " has outperformed the S&P 500 by ", SP_v_Stock_500, "%."))
  }else{
    print(paste0("In the past 500 trading days, ", symbol, " has underperformed the S&P 500 by ", SP_v_Stock_500, "%."))
  }
  if(DOW_v_Stock_5 > 0){
  print(paste0("In the past 5 trading days, ", symbol, " has outperformed the DJIA by ", DOW_v_Stock_5, "%."))
  }else{
    print(paste0("In the past 5 trading days, ", symbol, " has underperformed the DJIA by ", DOW_v_Stock_5, "%."))
  }
  if(DOW_v_Stock_25 > 0){
  print(paste0("In the past 25 trading days, ", symbol, " has outperformed the DJIA by ", DOW_v_Stock_25, "%."))
  }else{
    print(paste0("In the past 25 trading days, ", symbol, " has underperformed the DJIA by ", DOW_v_Stock_25, "%."))
  }
  if(DOW_v_Stock_100 > 0){
  print(paste0("In the past 100 trading days, ", symbol, " has outperformed the DJIA by ", DOW_v_Stock_100, "%."))
  }else{
    print(paste0("In the past 100 trading days, ", symbol, " has underperformed the DJIA by ", DOW_v_Stock_100, "%."))
  }
  if(DOW_v_Stock_200 > 0){
  print(paste0("In the past 200 trading days, ", symbol, " has outperformed the DJIA by ", DOW_v_Stock_200, "%."))
  }else{
    print(paste0("In the past 200 trading days, ", symbol, " has underperformed the DJIA by ", DOW_v_Stock_200, "%."))
  }
  if(DOW_v_Stock_500 > 0){
  print(paste0("In the past 500 trading days, ", symbol, " has outperformed the DJIA by ", DOW_v_Stock_500, "%."))
  }else{
    print(paste0("In the past 500 trading days, ", symbol, " has underperformed the DJIA by ", DOW_v_Stock_500, "%."))
  }
  #Print Results of Company Profile Analysis
  cat("\n")
print("**********COMPANY PROFILE**********")
  print(paste0(symbol, " passed ", value_counter, " of our 5 valuation tests, ", liquid_counter, " of our 3 liquidity tests, and our singular profitability test."))
  #Final Statement
  cat("\n")
  cat("\n")
  cat("\n")
  #Dividend and Moving Average Graphs
  graphs(graph_1, dividend_graph)
  }
# ****************************************
# ****************************************
# **********Part 6: Stock Filter**********
# ****************************************
# ****************************************
mat_stock <- tq_index("SP500")
vec_stock <-  mat_stock[,1]
length_vec <- 1:nrow(vec_stock)
boolean_stock_vector <- 1:length(length_vec)
boolean_stock_vector[1:length(length_vec)] <- FALSE
#Get data from the big markets (S&P, DOW, Russell)
SP500_data <- get_stock_data("^GSPC")
  DOW_data <- get_stock_data("^DJI")
MA_length <- length(SP500_data$df.tickers$price.close)
#Get prices from the big markets
today_SP500 <- SP500_data$df.tickers$price.close[MA_length]
  day_5_SP500 <- SP500_data$df.tickers$price.close[MA_length-5]
  day_25_SP500 <- SP500_data$df.tickers$price.close[(MA_length-25)]
  day_100_SP500 <- SP500_data$df.tickers$price.close[(MA_length-100)]
  day_200_SP500 <- SP500_data$df.tickers$price.close[(MA_length-200)]
  day_500_SP500 <- SP500_data$df.tickers$price.close[(MA_length-500)]
  today_DOW <- DOW_data$df.tickers$price.close[MA_length]
  day_5_DOW <- DOW_data$df.tickers$price.close[MA_length-5]
  day_25_DOW <- DOW_data$df.tickers$price.close[(MA_length-25)]
  day_100_DOW <- DOW_data$df.tickers$price.close[(MA_length-100)]
  day_200_DOW <- DOW_data$df.tickers$price.close[(MA_length-200)]
  day_500_DOW <- DOW_data$df.tickers$price.close[(MA_length-500)]
#Get the percent changes for the big markets
SP500_5_day_change <- percent_change(today_SP500, day_5_SP500)
  SP500_25_day_change <- percent_change(today_SP500, day_25_SP500)
  SP500_100_day_change <- percent_change(today_SP500, day_100_SP500)
  SP500_200_day_change <- percent_change(today_SP500, day_200_SP500)
  SP500_500_day_change <- percent_change(today_SP500, day_500_SP500)
  DOW_5_day_change <- percent_change(today_DOW, day_5_DOW)
  DOW_25_day_change <- percent_change(today_DOW, day_25_DOW)
  DOW_100_day_change <- percent_change(today_DOW, day_100_DOW)
  DOW_200_day_change <- percent_change(today_DOW, day_200_DOW)
  DOW_500_day_change <- percent_change(today_DOW, day_500_DOW)
#Create the excel data frame
excel_df <- data.frame()
#Run Loop that displays Graph and Moving Average of a Stock
for(k in length_vec){
  score <- 0
  symbol <- as.character(vec_stock[k,1])
  days_back <- 1000
today <- Sys.Date()
  Past_Day <- today - days_back
  frequency <- "daily"
try(stock_data <-  BatchGetSymbols(symbol,
                              first.date = Past_Day,
                              freq.data = frequency,
                              last.date = today,
                              cache.folder = file.path(tempdir(),
                                                  'BGS_Cache') ))
  closing_prices <- stock_data$df.tickers$price.close
  #Get the price of the stock/Market various days ago
  try(today_stock <- closing_prices[MA_length])
  try(day_5_stock <- closing_prices[MA_length-5])
  try(day_25_stock <- closing_prices[(MA_length-25)])
  try(day_100_stock <- closing_prices[(MA_length-100)])
  try(day_200_stock <- closing_prices[(MA_length-200)])
  try(day_500_stock <- closing_prices[(MA_length-500)])
#Calculate the Performance of the stock versus the performance of the Market over Various Time periods
  try(stock_5_day_change <- percent_change(today_stock, day_5_stock))
  try(stock_25_day_change <- percent_change(today_stock, day_25_stock))
  try(stock_100_day_change <- percent_change(today_stock, day_100_stock))
  try(stock_200_day_change <- percent_change(today_stock, day_200_stock))
  try(stock_500_day_change <- percent_change(today_stock, day_500_stock))
  #Calculate the difference in performance between the market and the stock over those ranges
  try(SP_v_Stock_5 <- percent_difference(stock_5_day_change, SP500_5_day_change))
  try(SP_v_Stock_25 <- percent_difference(stock_25_day_change, SP500_25_day_change))
  try(SP_v_Stock_100 <- percent_difference(stock_100_day_change, SP500_100_day_change))
  try(SP_v_Stock_200 <- percent_difference(stock_200_day_change, SP500_200_day_change))
  try(SP_v_Stock_500 <- percent_difference(stock_500_day_change, SP500_500_day_change))
  try(DOW_v_Stock_5 <- percent_difference(stock_5_day_change, DOW_5_day_change))
  try(DOW_v_Stock_25 <- percent_difference(stock_25_day_change, DOW_25_day_change))
  try(DOW_v_Stock_100 <- percent_difference(stock_100_day_change, DOW_100_day_change))
  try(DOW_v_Stock_200 <- percent_difference(stock_200_day_change, DOW_200_day_change))
  try(DOW_v_Stock_500 <- percent_difference(stock_500_day_change, DOW_500_day_change))
  #***************************************
#***************************************
#PART 1: Dividend and Earnings Analysis
#***************************************
#***************************************
  symbol_1 <- tolower(symbol)
#Specifying the url for desired website to be scraped
url_2 <- paste0('https://www.marketwatch.com/investing/stock/', symbol_1,'/analystestimates')
#Reading the HTML code from the website
try(webpage_2 <- read_html(url_2))
#Using CSS selectors to scrape the stock information
#This is the future predictions
try(stock_data_2 <- html_nodes(webpage_2,'td')%>%
  html_text())
#Convert EPS to Numerical
try(EPS_Current<- as.numeric(stock_data_2[12]))
#Calculate Earnings Growth
try(Next_Year_EPS <- as.numeric(stock_data_2[20]))
  try(tytny <- (Next_Year_EPS-EPS_Current)/EPS_Current*100)
  #Calculate Earnings Growth
try(Last_Year_EPS <- as.numeric(stock_data_2[18]))
try(lytty <- (EPS_Current-Last_Year_EPS)/Last_Year_EPS*100)
#Calculate Number of Each Rating
try(Buy <- as.numeric(stock_data_2[51]) + as.numeric(stock_data_2[55]))
  try(Hold <- as.numeric(stock_data_2[59]))
    try(Sell <- as.numeric(stock_data_2[63]) + as.numeric(stock_data_2[67]))
#***************************************
#***************************************
#PART #2: Insider Trading
#***************************************
#***************************************
#Specifying the url for desired website to be scraped
url_3 <- paste0('https://www.marketwatch.com/investing/stock/', symbol_1, '/insideractions')
#Reading the HTML code from the website
try(webpage_3 <- read_html(url_3))
#Using CSS selectors to scrape the stock information
#This is the insider information
try(stock_data_3a <- html_nodes(webpage_3, '.date') %>%
  html_text())
try(stock_data_3b <- html_nodes(webpage_3,'.transactionDesc')%>%
  html_text())
try(stock_data_3c <- html_nodes(webpage_3,'.shares')%>%
  html_text())
try(stock_data_3d <- html_nodes(webpage_3, '.value')%>%
  html_text())
#Organize the insider data
try(master_length <- length(stock_data_3b))
try(stock_data_3a <- stock_data_3a[2:(master_length+1)])
try(stock_data_3c <- as.numeric(gsub(",", "", stock_data_3c[2:(master_length+1)])))
try(stock_data_3d <- stock_data_3d[2:(master_length+1)])
#Find where the trader(s) is/are disposing of stocks that cost actual money
try(bool_vec_2 <- (stock_data_3d != 0))
  try(stock_data_3b <- stock_data_3b[bool_vec_2])
  try(stock_data_3c <- stock_data_3c[bool_vec_2])
  try(bool_vec <- grepl("Disposition", stock_data_3b))
  #Find stocks bought and stocks sold
try(stocks_sold <- stock_data_3c[bool_vec])
try(stocks_bought <- stock_data_3c[!bool_vec])
#Calculate the net activity of insiders
try(total_shares <- sum(stocks_bought) - sum(stocks_sold))
  #***************************************
#***************************************
#Part 3: Company Profile
#***************************************
#***************************************
url_4 <- paste0('https://www.marketwatch.com/investing/stock/',symbol_1,'/profile')
#Read in the data for the company profile
try(stock_data_4 <- read_html(url_4) %>%
  html_nodes('.lastcolumn')%>%
  html_text())
value_counter <- 0
  liquid_counter <- 0
  profit_counter <- 0
  #P/E
  try(PE <- as.numeric(stock_data_4[12]))
try(if(PE<30){
  value_counter <- value_counter + 1
})
  #P/S
  try(PS <- as.numeric(stock_data_4[15]))
try(if(PS<2){
  value_counter <- value_counter + 1
})
  #P/B
  try(PB <- as.numeric(stock_data_4[16]))
try(if(PB<3){
  value_counter <- value_counter + 1
})
  #EV/EBITDA
  try(EVEBITDA <- as.numeric(stock_data_4[17]))
try(if(EVEBITDA<13){
  value_counter <- value_counter + 1
})
  #EV/S
  try(EVS <- as.numeric(stock_data_4[18]))
try(if(EVS<3){
  value_counter <- value_counter + 1
})
  #Current Liquidity Ratio
  try(CLR <- as.numeric(stock_data_4[25]))
try(if(CLR>1){
  liquid_counter <- liquid_counter + 1
})
  #Quick Liquidity Ratio
  try(QLR <- as.numeric(stock_data_4[26]))
try(if(QLR>1){
  liquid_counter <- liquid_counter + 1
})
  #Cash Liquidity Ratio
  try(CaLR <- as.numeric(stock_data_4[27]))
try(if(CaLR<0.5){
  liquid_counter <- liquid_counter + 1
})
  #Net Profit Margin
  try(Profit_Margin <- as.numeric(stock_data_4[31]))
  #Estimated Price
  try(Estimated_Price <- as.numeric(stock_data_2[4]))
  #Initialize and calculate 20 day moving average
try(MA_20 <- Moving_Average(MA_length, 19,closing_prices))
#Initialize and calculate 50 day moving average
try(MA_50 <- Moving_Average(MA_length, 49,closing_prices))
#Initialize and calculate 200 day moving average
try(MA_200 <- Moving_Average(MA_length, 199,closing_prices))
  #Initialize and calculate 5 day moving average
  try(MA_6 <- Moving_Average(MA_length, 5, closing_prices))
  #Get Percent Changes for MA
  try(percent_MA_20 <- (closing_prices[MA_length]/MA_20[MA_length]-1)*100)
  try(percent_MA_50 <- (closing_prices[MA_length]/MA_50[MA_length]-1)*100)
  try(percent_MA_200 <- (closing_prices[MA_length]/MA_200[MA_length]-1)*100)
  try(percent_MA_6 <- (closing_prices[MA_length]/MA_6[MA_length]-1)*100)
  #Final Statement
  cat("\n")
  #Calculate Score
  try(if(tytny>10){
    score <- score+1
  })
  try(if(total_shares>0){
    score<- score+1
  })
  try(if(Buy>(Hold+Sell)){
    score<-score+1
  })
  try(if(Estimated_Price>(1.1*today_stock)){
    score<-score+1
  })
  try(if(lytty>=0 ){
    score<-score+1
  })
  try(if(EPS_Current>0){
    score<-score+1
  })
  try(if(Profit_Margin>15){
    score<-score+1
  })
  try(if(liquid_counter>=2){
    score<-score+1
  })
  try(if(value_counter>=2){
    score<-score+1
  })
try(if(score >= 8){
    boolean_stock_vector[k] <- TRUE
    Analysis(symbol, tytny, Buy, Hold, Sell, total_shares, EPS_Current,Next_Year_EPS,lytty, value_counter, liquid_counter, MA_20, MA_50, MA_200, MA_length, percent_MA_20, percent_MA_50, percent_MA_200, SP_v_Stock_5, SP_v_Stock_25, SP_v_Stock_100, SP_v_Stock_200, SP_v_Stock_500, DOW_v_Stock_5,DOW_v_Stock_25,DOW_v_Stock_100,DOW_v_Stock_200,DOW_v_Stock_500)
  }else{
    boolean_stock_vector[k] <- FALSE
  })
  #Add to data frame
  try(if(today_stock > 0){
  excel_vec <- c(score,symbol,today_stock,lytty,tytny,EPS_Current,total_shares,Buy,Hold,Sell,Estimated_Price,value_counter,liquid_counter,Profit_Margin, MA_20[MA_length], percent_MA_20, MA_50[MA_length], percent_MA_50, MA_200[MA_length], percent_MA_200, MA_6[MA_length], percent_MA_6, PE, PS, PB, EVEBITDA, EVS, CLR, QLR, CaLR, SP_v_Stock_5, SP_v_Stock_25, SP_v_Stock_100, SP_v_Stock_200, SP_v_Stock_500, DOW_v_Stock_5,DOW_v_Stock_25,DOW_v_Stock_100,DOW_v_Stock_200,DOW_v_Stock_500)
  excel_df<-rbind(excel_df,excel_vec)
    print(k)
  })
}
#Isolate the Winners
logical_values<- as.logical(boolean_stock_vector)
vec_stock <- t(vec_stock)
vec_stock <- as.vector(vec_stock)
filtered_stock_vector <- vec_stock[logical_values]
#Column Names for data frame
colnames(excel_df) <- c("Score X/9", "Symbol","Price", "YoY Earnings Growth (%)", "Future YoY Earnings Growth (%)", "Current EPS", "Insider Activity", "Buy", "Hold", "Sell","Predicted Price", "Valuation Tests Passed", "Liquidity Tests Passed", "Profit Margin", "20 Day Moving Average", "Price v MA20 (%)", "50 Day Moving Average", "Price v MA50 (%)", "200 Day Moving Average", "Price v MA200 (%)", "6 day moving average", "Price v MA6 (%)", "Price/Earnings", "Price/Sales", "Price/Book", "EV/EBITDA", "Enterprise Value/Share", "Current Liquidity Ratio", "Quick Ratio", "Cash Ratio", "Stock v S&P 500 (5 days, %)", "Stock v S&P 500 (25 days, %)", "Stock v S&P 500 (100 days, %)", "Stock v S&P 500 (200 days, %)", "Stock v S&P 500 (500 days, %)", "Stock v DJIA (5 days, %)", "Stock v DJIA (25 days, %)", "Stock v DJIA (100 days, %)", "Stock v DJIA (200 days, %)", "Stock v DJIA (500 days, %)")
#Put the data into an excel spreadsheet
stock_workbook <- loadWorkbook("[WORKBOOK NAME]")
createSheet(wb = stock_workbook, sheetName = as.character(Sys.Date()))
write.xlsx(excel_df, "Stock Data.xlsx",sheetName = as.character(Sys.Date()), row.names = FALSE, append = TRUE)

print(filtered_stock_vector)
